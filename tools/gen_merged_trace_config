#!/usr/bin/env python
# Copyright (C) 2018 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import re
import subprocess
import sys

PROTOS = (
  'protos/perfetto/config/data_source_config.proto',
  'protos/perfetto/config/trace_config.proto',
)

MERGED_OUT_PROTO = 'protos/perfetto/config/trace_config_merged.proto'

STRIP_PATTERN = (r'// ----- BEGIN DATA SOURCE SPECIFIC FIELDS -----(.|\n)' +
                 r'*----- END DATA SOURCE SPECIFIC FIELDS -----')
STRIP_REPLACEMENT = 'extensions 100 to max;  // Data-source specific fields.'

AUTOGEN_BANNER = '''
/*******************************************************************************
 * AUTOGENERATED - DO NOT EDIT
 *******************************************************************************
 * This file has been generated by %s
 * merging the perfetto config protos and stripping the datasource-specific
 * fields. This fused proto should be used only by other components in the
 * Android tree outside of Perfetto.
 */
'''

def main():
  root_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
  merged_content = ''
  for proto in PROTOS:
    path = os.path.join(root_dir, proto)
    with open(path) as f:
      content = f.read()
      header = re.match(r'\/\*(?:.|\s)*?package.*;\n', content)
      header = header.group(0)
      content = content[len(header):]
      if merged_content == '':
        merged_content = header
        merged_content += AUTOGEN_BANNER % __file__
      content = re.sub(STRIP_PATTERN, STRIP_REPLACEMENT, content)
      content = re.sub(r'\nimport.*?\n', '', content)
      merged_content += '\n// Begin of %s\n' % proto
      merged_content += content
      merged_content += '\n// End of %s\n' % proto

  out_path = os.path.join(root_dir, MERGED_OUT_PROTO)

  prev_content = None
  if os.path.exists(out_path):
    with open(out_path, 'rb') as fprev:
      prev_content = fprev.read()

  if prev_content == merged_content:
    return 0

  if '--check-only' in sys.argv:
    return 1

  print 'Updating %s' % MERGED_OUT_PROTO
  with open(out_path, 'wb') as fout:
    fout.write(merged_content)
  return 0

if __name__ == '__main__':
  sys.exit(main())
