#!/usr/bin/env python3
# Copyright (C) 2021 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file should do the same thing when being invoked in any of these ways:
# ./tracebox
# python tracebox
# bash tracebox
# cat ./tracebox | bash
# cat ./tracebox | python -

BASH_FALLBACK = """ "
exec python3 - "$@" <<'#'EOF
#"""

TOOL_NAME = 'tracebox'

# BEGIN_SECTION_GENERATED_BY(roll-prebuilts)
# Revision: v27.1
PERFETTO_PREBUILT_MANIFEST = [{
    'tool':
        'tracebox',
    'arch':
        'mac-amd64',
    'file_name':
        'tracebox',
    'file_size':
        1382560,
    'url':
        'https://commondatastorage.googleapis.com/perfetto-luci-artifacts/v27.1/mac-amd64/tracebox',
    'sha256':
        '31143846bb429ee18e47a7e7edd55e191e8d758acafe30c6c345f3c46f6dec1c',
    'platform':
        'darwin',
    'machine': ['x86_64']
}, {
    'tool':
        'tracebox',
    'arch':
        'mac-arm64',
    'file_name':
        'tracebox',
    'file_size':
        1292392,
    'url':
        'https://commondatastorage.googleapis.com/perfetto-luci-artifacts/v27.1/mac-arm64/tracebox',
    'sha256':
        '62073c13abecd13845a3c75f1a7f2f37f62964d0f8f80acf2d9839f62e20a1cb',
    'platform':
        'darwin',
    'machine': ['arm64']
}, {
    'tool':
        'tracebox',
    'arch':
        'linux-amd64',
    'file_name':
        'tracebox',
    'file_size':
        1804008,
    'url':
        'https://commondatastorage.googleapis.com/perfetto-luci-artifacts/v27.1/linux-amd64/tracebox',
    'sha256':
        '953bf594df2387dacec1349aad8b3bfccf6361710c2e93c8bb3b714cb0f1fdba',
    'platform':
        'linux',
    'machine': ['x86_64']
}, {
    'tool':
        'tracebox',
    'arch':
        'linux-arm',
    'file_name':
        'tracebox',
    'file_size':
        1043296,
    'url':
        'https://commondatastorage.googleapis.com/perfetto-luci-artifacts/v27.1/linux-arm/tracebox',
    'sha256':
        'beaa0cf946135d89eac4829215ec280cd5f76998a6f0fa1134a3147cb6382408',
    'platform':
        'linux',
    'machine': ['armv6l', 'armv7l', 'armv8l']
}, {
    'tool':
        'tracebox',
    'arch':
        'linux-arm64',
    'file_name':
        'tracebox',
    'file_size':
        1679368,
    'url':
        'https://commondatastorage.googleapis.com/perfetto-luci-artifacts/v27.1/linux-arm64/tracebox',
    'sha256':
        '966e358bf9f63eb702831c81e826b83806dcf431fc467c8625d1844671a2ae8e',
    'platform':
        'linux',
    'machine': ['aarch64']
}, {
    'tool':
        'tracebox',
    'arch':
        'android-arm',
    'file_name':
        'tracebox',
    'file_size':
        1079252,
    'url':
        'https://commondatastorage.googleapis.com/perfetto-luci-artifacts/v27.1/android-arm/tracebox',
    'sha256':
        '6829c2e25ef90eeee66d712f1bf178e6a59749bac64c1b98686219f3cee888a2'
}, {
    'tool':
        'tracebox',
    'arch':
        'android-arm64',
    'file_name':
        'tracebox',
    'file_size':
        1637032,
    'url':
        'https://commondatastorage.googleapis.com/perfetto-luci-artifacts/v27.1/android-arm64/tracebox',
    'sha256':
        'dfd366d70a9e6cfa9a6d75596a5beb0a98b1b78a88b2e8ed666afde849e50480'
}, {
    'tool':
        'tracebox',
    'arch':
        'android-x86',
    'file_name':
        'tracebox',
    'file_size':
        1656748,
    'url':
        'https://commondatastorage.googleapis.com/perfetto-luci-artifacts/v27.1/android-x86/tracebox',
    'sha256':
        'f97bee9c1ea147c8db96aaeb7d52d0df0b5fb273af77d5507515b780f7479cf7'
}, {
    'tool':
        'tracebox',
    'arch':
        'android-x64',
    'file_name':
        'tracebox',
    'file_size':
        1890984,
    'url':
        'https://commondatastorage.googleapis.com/perfetto-luci-artifacts/v27.1/android-x64/tracebox',
    'sha256':
        'ef1518d8bf2385c14995f9444ae293afbc87e95fc3830f32c74296460839dd8e'
}]


# DO NOT EDIT. If you wish to make edits to this code, you need to change only
# //tools/get_perfetto_prebuilt.py and run /tools/roll-prebuilts to regenerate
# all the others scripts this is embedded into.
def get_perfetto_prebuilt(tool_name, soft_fail=False, arch=None):
  """ Downloads the prebuilt, if necessary, and returns its path on disk. """

  # The first time this is invoked, it downloads the |url| and caches it into
  # ~/.perfetto/prebuilts/$tool_name. On subsequent invocations it just runs the
  # cached version.
  def download_or_get_cached(file_name, url, sha256):
    import os, hashlib, subprocess
    dir = os.path.join(
        os.path.expanduser('~'), '.local', 'share', 'perfetto', 'prebuilts')
    os.makedirs(dir, exist_ok=True)
    bin_path = os.path.join(dir, file_name)
    sha256_path = os.path.join(dir, file_name + '.sha256')
    needs_download = True

    # Avoid recomputing the SHA-256 on each invocation. The SHA-256 of the last
    # download is cached into file_name.sha256, just check if that matches.
    if os.path.exists(bin_path) and os.path.exists(sha256_path):
      with open(sha256_path, 'rb') as f:
        digest = f.read().decode()
        if digest == sha256:
          needs_download = False

    if needs_download:
      # Either the filed doesn't exist or the SHA256 doesn't match.
      tmp_path = bin_path + '.tmp'
      print('Downloading ' + url)
      subprocess.check_call(['curl', '-f', '-L', '-#', '-o', tmp_path, url])
      with open(tmp_path, 'rb') as fd:
        actual_sha256 = hashlib.sha256(fd.read()).hexdigest()
      if actual_sha256 != sha256:
        raise Exception('Checksum mismatch for %s (actual: %s, expected: %s)' %
                        (url, actual_sha256, sha256))
      os.chmod(tmp_path, 0o755)
      os.rename(tmp_path, bin_path)
      with open(sha256_path, 'w') as f:
        f.write(sha256)
    return bin_path
    # --- end of download_or_get_cached() ---

  # --- get_perfetto_prebuilt() function starts here. ---
  import os, platform, sys
  plat = sys.platform.lower()
  machine = platform.machine().lower()
  manifest_entry = None
  for entry in PERFETTO_PREBUILT_MANIFEST:
    # If the caller overrides the arch, just match that (for Android prebuilts).
    if arch:
      if entry.get('arch') == arch:
        manifest_entry = entry
        break
      continue
    # Otherwise guess the local machine arch.
    if entry.get('tool') == tool_name and entry.get(
        'platform') == plat and machine in entry.get('machine', []):
      manifest_entry = entry
      break
  if manifest_entry is None:
    if soft_fail:
      return None
    raise Exception(
        ('No prebuilts available for %s-%s\n' % (plat, machine)) +
        'See https://perfetto.dev/docs/contributing/build-instructions')

  return download_or_get_cached(
      file_name=manifest_entry['file_name'],
      url=manifest_entry['url'],
      sha256=manifest_entry['sha256'])


# END_SECTION_GENERATED_BY(roll-prebuilts)

if __name__ == '__main__':
  import sys, subprocess, os
  bin_path = get_perfetto_prebuilt(TOOL_NAME)
  if sys.platform.lower() == 'win32':
    exit(subprocess.check_call([bin_path, *sys.argv[1:]]))
  os.execv(bin_path, [bin_path] + sys.argv[1:])

#EOF
