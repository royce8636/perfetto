#!/usr/bin/env python3
# Copyright (C) 2021 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file should do the same thing when being invoked in any of these ways:
# ./traceconv
# python traceconv
# bash traceconv
# cat ./traceconv | bash
# cat ./traceconv | python -

BASH_FALLBACK = """ "
exec python3 - "$@" <<'#'EOF
#"""

TOOL_NAME = 'traceconv'

# BEGIN_SECTION_GENERATED_BY(roll-prebuilts)
# Revision: v28.0
PERFETTO_PREBUILT_MANIFEST = [{
    'tool':
        'traceconv',
    'arch':
        'mac-amd64',
    'file_name':
        'traceconv',
    'file_size':
        7181712,
    'url':
        'https://commondatastorage.googleapis.com/perfetto-luci-artifacts/v28.0/mac-amd64/traceconv',
    'sha256':
        '6b398ad9539ddf8208536c0412db198d4627daa97efc7e0850f3e7ec0e115510',
    'platform':
        'darwin',
    'machine': ['x86_64']
}, {
    'tool':
        'traceconv',
    'arch':
        'mac-arm64',
    'file_name':
        'traceconv',
    'file_size':
        6025176,
    'url':
        'https://commondatastorage.googleapis.com/perfetto-luci-artifacts/v28.0/mac-arm64/traceconv',
    'sha256':
        '407e2988e795a593158304061c547093ad74419f826dd03c2a66911b5a29d065',
    'platform':
        'darwin',
    'machine': ['arm64']
}, {
    'tool':
        'traceconv',
    'arch':
        'linux-amd64',
    'file_name':
        'traceconv',
    'file_size':
        7668600,
    'url':
        'https://commondatastorage.googleapis.com/perfetto-luci-artifacts/v28.0/linux-amd64/traceconv',
    'sha256':
        '1bebc0dd7b2b18fd4abeeb5f811d6d4c7f431d212efd5469c7e5d8b18b19e0c7',
    'platform':
        'linux',
    'machine': ['x86_64']
}, {
    'tool':
        'traceconv',
    'arch':
        'linux-arm',
    'file_name':
        'traceconv',
    'file_size':
        5827680,
    'url':
        'https://commondatastorage.googleapis.com/perfetto-luci-artifacts/v28.0/linux-arm/traceconv',
    'sha256':
        'a19780145f965838e334a57a52230bc67b0db207365746360314fbbbe4e1d12f',
    'platform':
        'linux',
    'machine': ['armv6l', 'armv7l', 'armv8l']
}, {
    'tool':
        'traceconv',
    'arch':
        'linux-arm64',
    'file_name':
        'traceconv',
    'file_size':
        6876384,
    'url':
        'https://commondatastorage.googleapis.com/perfetto-luci-artifacts/v28.0/linux-arm64/traceconv',
    'sha256':
        '2a5e5fcf340070ed6a30204c79b7e76787c5f26181bc8377587547f3eb5df685',
    'platform':
        'linux',
    'machine': ['aarch64']
}, {
    'tool':
        'traceconv',
    'arch':
        'android-arm',
    'file_name':
        'traceconv',
    'file_size':
        4881820,
    'url':
        'https://commondatastorage.googleapis.com/perfetto-luci-artifacts/v28.0/android-arm/traceconv',
    'sha256':
        '73827b82d941a9650580fbd48c3d4ff2323eb8d4ff9d3fffd3e0cac1bc853f34'
}, {
    'tool':
        'traceconv',
    'arch':
        'android-arm64',
    'file_name':
        'traceconv',
    'file_size':
        6222592,
    'url':
        'https://commondatastorage.googleapis.com/perfetto-luci-artifacts/v28.0/android-arm64/traceconv',
    'sha256':
        '72d46258645d486f40ee463052b609d1fd7c4cc64f70c0ba2ef811a9924be98e'
}, {
    'tool':
        'traceconv',
    'arch':
        'android-x86',
    'file_name':
        'traceconv',
    'file_size':
        7089524,
    'url':
        'https://commondatastorage.googleapis.com/perfetto-luci-artifacts/v28.0/android-x86/traceconv',
    'sha256':
        '689d0b48f91624585285b3833362cdcfdf0de1ff5dedcb97bb9851c729b4a15e'
}, {
    'tool':
        'traceconv',
    'arch':
        'android-x64',
    'file_name':
        'traceconv',
    'file_size':
        7316248,
    'url':
        'https://commondatastorage.googleapis.com/perfetto-luci-artifacts/v28.0/android-x64/traceconv',
    'sha256':
        '785ec3f0da302ed52521febc5ed5e2cef57ae8840ff241037c51b8d94464f6a2'
}, {
    'tool':
        'traceconv',
    'arch':
        'windows-amd64',
    'file_name':
        'traceconv.exe',
    'file_size':
        6850048,
    'url':
        'https://commondatastorage.googleapis.com/perfetto-luci-artifacts/v28.0/windows-amd64/traceconv.exe',
    'sha256':
        '19cdec3824d369be3bb053b40b3cfe9f62c2e57e71a5e2ee17ca15b6e7463683',
    'platform':
        'win32',
    'machine': ['amd64']
}]


# DO NOT EDIT. If you wish to make edits to this code, you need to change only
# //tools/get_perfetto_prebuilt.py and run /tools/roll-prebuilts to regenerate
# all the others scripts this is embedded into.
def get_perfetto_prebuilt(tool_name, soft_fail=False, arch=None):
  """ Downloads the prebuilt, if necessary, and returns its path on disk. """

  # The first time this is invoked, it downloads the |url| and caches it into
  # ~/.perfetto/prebuilts/$tool_name. On subsequent invocations it just runs the
  # cached version.
  def download_or_get_cached(file_name, url, sha256):
    import os, hashlib, subprocess
    dir = os.path.join(
        os.path.expanduser('~'), '.local', 'share', 'perfetto', 'prebuilts')
    os.makedirs(dir, exist_ok=True)
    bin_path = os.path.join(dir, file_name)
    sha256_path = os.path.join(dir, file_name + '.sha256')
    needs_download = True

    # Avoid recomputing the SHA-256 on each invocation. The SHA-256 of the last
    # download is cached into file_name.sha256, just check if that matches.
    if os.path.exists(bin_path) and os.path.exists(sha256_path):
      with open(sha256_path, 'rb') as f:
        digest = f.read().decode()
        if digest == sha256:
          needs_download = False

    if needs_download:
      # Either the filed doesn't exist or the SHA256 doesn't match.
      tmp_path = bin_path + '.tmp'
      print('Downloading ' + url)
      subprocess.check_call(['curl', '-f', '-L', '-#', '-o', tmp_path, url])
      with open(tmp_path, 'rb') as fd:
        actual_sha256 = hashlib.sha256(fd.read()).hexdigest()
      if actual_sha256 != sha256:
        raise Exception('Checksum mismatch for %s (actual: %s, expected: %s)' %
                        (url, actual_sha256, sha256))
      os.chmod(tmp_path, 0o755)
      os.rename(tmp_path, bin_path)
      with open(sha256_path, 'w') as f:
        f.write(sha256)
    return bin_path
    # --- end of download_or_get_cached() ---

  # --- get_perfetto_prebuilt() function starts here. ---
  import os, platform, sys
  plat = sys.platform.lower()
  machine = platform.machine().lower()
  manifest_entry = None
  for entry in PERFETTO_PREBUILT_MANIFEST:
    # If the caller overrides the arch, just match that (for Android prebuilts).
    if arch:
      if entry.get('arch') == arch:
        manifest_entry = entry
        break
      continue
    # Otherwise guess the local machine arch.
    if entry.get('tool') == tool_name and entry.get(
        'platform') == plat and machine in entry.get('machine', []):
      manifest_entry = entry
      break
  if manifest_entry is None:
    if soft_fail:
      return None
    raise Exception(
        ('No prebuilts available for %s-%s\n' % (plat, machine)) +
        'See https://perfetto.dev/docs/contributing/build-instructions')

  return download_or_get_cached(
      file_name=manifest_entry['file_name'],
      url=manifest_entry['url'],
      sha256=manifest_entry['sha256'])


# END_SECTION_GENERATED_BY(roll-prebuilts)

if __name__ == '__main__':
  import sys, subprocess, os
  bin_path = get_perfetto_prebuilt(TOOL_NAME)
  if sys.platform.lower() == 'win32':
    exit(subprocess.check_call([bin_path, *sys.argv[1:]]))
  os.execv(bin_path, [bin_path] + sys.argv[1:])

#EOF
