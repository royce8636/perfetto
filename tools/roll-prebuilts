#!/usr/bin/env python3
# Copyright (C) 2021 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Updates the python scripts in tools/{trace_processor, traceconv, tracebox}

This script does the following, for each prebuilt in PREBUILTS:
  - Downloads the artifact by the LUCI infrastructure, one for each arch.
  - Computes the SHA-256 of each artifact.
  - Generates a manifest with URL, SHA-256 and other details.
  - Merges tools/prebuilt_template.py with the manifest and writes tools/xxx.

This script is supposed to be run by Perfetto OWNERS after every monthly release
after the LUCI jobs have completed.
"""

import argparse
import hashlib
import logging
import os
import subprocess
import sys

from concurrent.futures import ThreadPoolExecutor

GCS_URL = 'https://commondatastorage.googleapis.com/perfetto-luci-artifacts'

ROOT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TOOLS_DIR = os.path.join(ROOT_DIR, 'tools')
GIT_REV = subprocess.check_output(['git', 'rev-parse', 'head']).decode().strip()

PREBUILTS = [
    {
        'tool': 'trace_processor_shell',
        'script': 'trace_processor',
        'archs': ['mac-amd64', 'linux-amd64', 'windows-amd64']
    },
    {
        'tool': 'trace_to_text',
        'script': 'traceconv',
        'archs': ['mac-amd64', 'linux-amd64', 'windows-amd64']
    },
    {
        'tool': 'tracebox',
        'script': 'tracebox',
        'archs': ['mac-amd64', 'linux-amd64']
    },
]

# Maps a CIPD 'os-arch' string into corresponding tuples that match against
# python's platform / machine API (see prebuilt_template.py).
ARCH_TO_PYTHON = {
    'mac-amd64': {
        'platform': 'darwin',
        'machine': 'x86_64'
    },
    'linux-amd64': {
        'platform': 'linux',
        'machine': 'x86_64'
    },
    'windows-amd64': {
        'platform': 'win32',
        'machine': 'amd64'
    },
}


def make_manifest(git_revision, tool, arch):
  ext = '.exe' if arch.startswith('windows') else ''
  file_name = tool + ext
  url = '%s/%s/%s/%s' % (GCS_URL, git_revision, arch, file_name)
  logging.info('Downloading %s', url)
  data = subprocess.check_output(['curl', '-fsL', '-o', '-', url])
  manifest = {
      'tool': tool,
      'arch': arch,
      'file_name': file_name,
      'file_size': len(data),
      'url': url,
      'sha256': hashlib.sha256(data).hexdigest()
  }
  manifest.update(ARCH_TO_PYTHON.get(arch, {}))
  return manifest


# Takes tool/prebuilt_template.py, replaces the manifest in it and writes the
# result into tools/$script_name.
def update_script(git_revision, tool_name, script_name, archs):
  with open(os.path.join(TOOLS_DIR, 'prebuilt_template.py'), 'r') as f:
    template = f.read()
  with ThreadPoolExecutor(max_workers=8) as executor:
    manifests = list(
        executor.map(lambda arch: make_manifest(git_revision, tool_name, arch),
                     archs))

    repl = '# Generated by %s @ %s\n' % (__file__, GIT_REV)
    repl += 'TOOL_NAME = \'%s\'\n' % tool_name
    repl += 'MANIFEST = %s\n' % str(manifests)
    script = template.replace('# REPLACEMENT_PLACEHOLDER', repl)
    out_file = os.path.join(TOOLS_DIR, script_name)
    with open(out_file + '.tmp', 'w') as f:
      f.write(script)
    os.rename(out_file + '.tmp', out_file)
    os.chmod(out_file, 0o755)


def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('-r', '--revision')
  args = parser.parse_args()

  if args.revision is None:
    print('Error: must pass --revision=v1.2 or --revision=0a1b2c3d\n')
    print('To list available revisions run')
    print('gsutil ls gs://perfetto-luci-artifacts/')
    print('or visit https://chrome-infra-packages.appspot.com/p/perfetto')
    return 1

  git_revision = args.revision
  for spec in PREBUILTS:
    logging.info('Updating %s', spec['script'])
    update_script(git_revision, spec['tool'], spec['script'], spec['archs'])


if __name__ == '__main__':
  logging.basicConfig(level=logging.INFO)
  sys.exit(main())
