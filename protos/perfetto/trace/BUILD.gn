# Copyright (C) 2017 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../../../gn/perfetto.gni")
import("../../../gn/proto_descriptor.gni")
import("../../../gn/proto_library.gni")
import("../../../gn/protozero_library.gni")

# Trace protos are split logically into two groups:
# 1. Full set of protos: :zero (for writers) and :lite (for readers).
# 2. Minimal set: :minimal_zero, :minimal_lite. These are mainly for chrome, to
#    avoid bloating binary size by pulling unnecessary protos.
#
# In practice, however, we need to split them in disjoint targets (minmal and
# non-minimal) and then use a group() target for the full protos. This is
# because build systems don't like two targets having genrules for the same
# .proto files.

# By default add new protos here.
proto_sources_non_minimal = [
  "trace_packet_defaults.proto",
  "test_event.proto",
  "trace_packet.proto",
  "trace.proto",
]

proto_sources_minimal = [
  "clock_snapshot.proto",
  "trigger.proto",
  "system_info.proto",
]

# Used only for packet_stream_validator.cc (in the service).
proto_sources_trusted = [ "trusted_packet.proto" ]

# Most targets should either depend on :zero (writers) / :lite (readers)
# or ":minimal_zero" / :minimal_lite (mostly for chrome).

# The full set of protozero-generated sources.
group("zero") {
  public_deps = [
    ":minimal_zero",
    ":non_minimal_zero",
  ]
}

# The full set of libprotobuf-generated sources.
group("lite") {
  public_deps = [
    ":minimal_lite",
    ":non_minimal_lite",
  ]
}

protozero_library("non_minimal_zero") {
  visibility = [ ":zero" ]
  deps = [
    "../config:zero",
    "android:zero",
    "chrome:zero",
    "filesystem:zero",
    "ftrace:zero",
    "gpu:zero",
    "interned_data:zero",
    "perfetto:zero",
    "power:zero",
    "profiling:zero",
    "ps:zero",
    "sys_stats:zero",
    "track_event:zero",
  ]
  sources = proto_sources_non_minimal
  proto_in_dir = "$perfetto_root_path/protos"
  proto_out_dir = "$perfetto_root_path/protos"
  generator_plugin_options = "wrapper_namespace=pbzero"
}

proto_library("non_minimal_lite") {
  visibility = [ ":lite" ]
  generate_python = false
  deps = [
    "../config:lite",
    "android:lite",
    "chrome:lite",
    "filesystem:lite",
    "ftrace:lite",
    "gpu:lite",
    "interned_data:lite",
    "perfetto:lite",
    "power:lite",
    "profiling:lite",
    "ps:lite",
    "sys_stats:lite",
    "track_event:lite",
  ]
  sources = proto_sources_non_minimal
  proto_in_dir = "$perfetto_root_path/protos"
  proto_out_dir = "$perfetto_root_path/protos"
}

proto_library("minimal_lite") {
  generate_python = false
  deps = [
    "../config:lite",
  ]
  sources = proto_sources_minimal
  proto_in_dir = "$perfetto_root_path/protos"
  proto_out_dir = "$perfetto_root_path/protos"
}

protozero_library("minimal_zero") {
  deps = [
    "../config:zero",
  ]
  sources = proto_sources_minimal
  proto_in_dir = "$perfetto_root_path/protos"
  proto_out_dir = "$perfetto_root_path/protos"
  generator_plugin_options = "wrapper_namespace=pbzero"
}

# Used by the traced service for packet sanitization.
proto_library("trusted_lite") {
  generate_python = false
  deps = [
    ":minimal_lite",
    "../common:lite",
    "../config:lite",
  ]
  sources = proto_sources_trusted
  proto_in_dir = "$perfetto_root_path/protos"
  proto_out_dir = "$perfetto_root_path/protos"
}

# This target is not used in the tree and is built only to guarantee that the
# autogenerated merged proto has a valid syntax.
proto_library("merged_trace") {
  generate_python = false
  proto_in_dir = "$perfetto_root_path/protos"
  proto_out_dir = "$perfetto_root_path/protos"
  sources = [
    "perfetto_trace.proto",
  ]
}

if (perfetto_build_standalone) {
  proto_descriptor("descriptor") {
    sources = [
      "trace.proto",
    ]
    generate_descriptor = "trace.descriptor"
    proto_in_dir = "$perfetto_root_path/protos"
    proto_out_dir = "$perfetto_root_path/protos"
  }
}
