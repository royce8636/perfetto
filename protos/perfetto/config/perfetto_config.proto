// AUTOGENERATED - DO NOT EDIT
// ---------------------------
// This file has been generated by
// AOSP://external/perfetto/tools/gen_merged_trace_config
// merging the perfetto config protos.
// This fused proto is intended to be copied in:
//  - Android tree, for statsd.
//  - Google internal repos.

syntax = "proto2";

package perfetto.protos;

// Begin of protos/perfetto/config/data_source_config.proto

// When editing this file run ./tools/gen_tracing_cpp_headers_from_protos.py
// to reflect changes in the corresponding C++ headers.

// The configuration that is passed to each data source when starting tracing.
message DataSourceConfig {
  // TODO: Move to own file when rearranging protos.
  message FtraceConfig {
    repeated string event_names = 1;
    repeated string atrace_categories = 2;
    repeated string atrace_apps = 3;
  }

  // Data source unique name, e.g., "org.chromium.trace_events". This must match
  // the name passed by the data source when it registers (see
  // RegisterDataSource()).
  optional string name = 1;

  // The index of the logging buffer where TracePacket(s) will be stored.
  // This field doesn't make a major difference for the Producer(s). The final
  // logging buffers, in fact, are completely owned by the Service. We just ask
  // the Producer to copy this number into the chunk headers it emits, so that
  // the Service can quickly identify the buffer where to move the chunks into
  // without expensive lookups on its fastpath.
  optional uint32 target_buffer = 2;

  // Keeep the lower IDs (up to 99) for fields that are *not* specific to
  // data-sources and needs to be processed by the traced daemon.

  optional FtraceConfig ftrace_config = 100;
}

// End of protos/perfetto/config/data_source_config.proto

// Begin of protos/perfetto/config/trace_config.proto

// When editing this file run ./tools/gen_tracing_cpp_headers_from_protos.py
// to reflect changes in the corresponding C++ headers.

// The overall config that is used when starting a new tracing session through
// ProducerPort::StartTracing().
// It contains the general config for the logging buffer(s) and the configs for
// all the data source being enabled.
message TraceConfig {
  message BufferConfig {
    optional uint32 size_kb = 1;
    // TODO: uint32 page_size = 2;

    // Keep include/perfetto/tracing/core/trace_config.h in sync.
    enum OptimizeFor {
      DEFAULT = 0;
      // The log buffer is drained sporadically (typically only once after
      // DisableTracing()). This mode minimizes the Service overhead when moving
      // the pages from the Producer(s) shared staging buffers into the central
      // log buffer, at the cost of doing some extra memory moves to reorder and
      // reassemble the logged TracePacket(s).
      ONE_SHOT_READ = 1;

      // The log buffer is streamed continuously to the Consumer.
      // Advantages:
      // - It allows to use a smaller log buffer size, as the buffer is only
      //   needed to cover the pipe latency between Service and Consumer.
      // - It reduces the total cpu cost of tracing, as TracePackets are
      //   reshuffled only once when collected from the Producers shmem buffers.
      // Disadvantage:
      // - More scheduling intrusive, as will periodically wake up the Consumer
      //   to stream data.
      // TODO: Not implemented yet.
      // CONTINUOUS_STREAMING = 2;
    }
    optional OptimizeFor optimize_for = 3;

    // Keep include/perfetto/tracing/core/trace_config.h in sync.
    enum FillPolicy {
      UNSPECIFIED = 0;
      RING_BUFFER = 1;
      // TODO: not implemented yet.
      // STOP_WHEN_FULL = 2;
    }
    optional FillPolicy fill_policy = 4;
  }
  repeated BufferConfig buffers = 1;

  message DataSource {
    // Filters and data-source specific config. It contains also the unique name
    // of the data source, the one passed in the  DataSourceDescriptor when they
    // register on the service.
    optional protos.DataSourceConfig config = 1;

    // Optional. If multiple producers (~processes) expose the same data source
    // and |producer_name_filter| != "", the data source is enabled only for
    // producers whose names match any of the producer_name_filter below.
    // The |producer_name_filter| has to be an exact match. (TODO:
    // support wildcards or regex).
    // This allows to enable a data source only for specific processes.
    // The "repeated" field has OR sematics: specifying a filter ["foo", "bar"]
    // will enable data source on both "foo" and "bar" (if existent).
    repeated string producer_name_filter = 2;
  }
  repeated DataSource data_sources = 2;

  optional uint32 duration_ms = 3;
}

// End of protos/perfetto/config/trace_config.proto
