// Copyright (C) 2023 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import {Span, Time} from '../base/time';
import {
  HighPrecisionTime,
  HighPrecisionTimeSpan,
} from '../common/high_precision_time';
import {FtraceFilterState, Pagination} from '../common/state';
import {FtraceEvent, RtuxEvent, globals} from '../frontend/globals';
import {publishFtracePanelData, publishRtuxPanelData} from '../frontend/publish';
import {ratelimit} from '../frontend/rate_limiters';
import {Engine} from '../trace_processor/engine';
import {LONG, NUM, STR, STR_NULL} from '../trace_processor/query_result';
import {rtux_loader} from '../frontend/rtux_loader';

import {Controller} from './controller';

// export interface FtraceControllerArgs {
//   engine: Engine;
// }

interface RetVal {
  events: RtuxEvent[];
  offset: number;
  numEvents: number;
}

export class RtuxController extends Controller<'main'> {
//   private engine: Engine;
  private oldSpan: Span<HighPrecisionTime> = HighPrecisionTimeSpan.ZERO;
  private oldFtraceFilter?: FtraceFilterState;
  private oldPagination?: Pagination;

  run() {
    if (this.shouldUpdate()) {
      this.oldSpan = globals.timeline.visibleWindowTime;
      this.oldPagination = globals.state.rtuxPagination;
      if (globals.state.rtuxPagination.count > 0) {
        this.lookupFtraceEventsRateLimited();
      }
    }
  }

  private lookupFtraceEventsRateLimited = ratelimit(() => {
    const {offset, count} = globals.state.rtuxPagination;
    // The formatter doesn't like formatted chained methods :(
    const promise = this.lookupRtuxEvents(offset, count);
    promise.then(({events, offset, numEvents}: RetVal) => {
      publishRtuxPanelData({events, offset, numEvents});
    });
  }, 250);

  private shouldUpdate(): boolean {
    // Has the visible window moved?
    const visibleWindow = globals.timeline.visibleWindowTime;
    if (!this.oldSpan.equals(visibleWindow)) {
      return true;
    }

    // Has the pagination changed?
    if (this.oldPagination !== globals.state.rtuxPagination) {
      return true;
    }

    return false;
  }

  async lookupRtuxEvents(offset: number, count: number): Promise<RetVal> {
    const appState = globals.state;
    const {start, end} = globals.stateVisibleTime();


    const vector = rtux_loader.getStoredVector();
    const filteredEvents = vector.filter(({key}) => key >= start && key <= end);
    // Next, apply offset and count to simulate SQL's LIMIT and OFFSET
    const paginatedEvents = filteredEvents.slice(offset, offset + count).map(({key, value}) => ({
        ts: key,
        event: value
    }));
    const events: RtuxEvent[] = [];
    paginatedEvents.forEach(({ts, event}) => {
        events.push({ts, event});
    });
    // This total number is important for pagination on the UI to understand the total available events
    const numEvents = filteredEvents.length;

    return {events, offset, numEvents};
  }
};
