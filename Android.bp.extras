// These targets are appended to the autogenerated Android.bp by tools/gen_android_bp.

cc_library_static {
  name: "perfetto_cts_jni_deps",
  srcs: [
    "src/base/test/test_task_runner.cc",
    "test/fake_producer.cc",
    "test/task_runner_thread_delegates.cc",
  ],
  shared_libs: [
    "libprotobuf-cpp-lite",
  ],
  static_libs: [
    "libgtest",
    "libperfetto_client_experimental",
  ],
  defaults: [
    "perfetto_defaults",
  ],
}

java_library_host {
  name: "perfetto_config-full",
  proto: {
      type: "full",
  },
  srcs: [
    "protos/perfetto/config/perfetto_config.proto",
  ],
}

// This sample target shows how to use the perfetto client API from within the
// Android tree.
cc_binary {
  name: "libperfetto_client_example",
  srcs: [
    "test/client_api_example.cc",
  ],
  static_libs: [
    "libperfetto_client_experimental",
    "perfetto_trace_protos",
  ],
  shared_libs: [
    "libprotobuf-cpp-lite",
    "liblog",
  ],
  cflags: [
    "-DGOOGLE_PROTOBUF_NO_RTTI",
    "-DGOOGLE_PROTOBUF_NO_STATIC_INITIALIZER",
  ],
  defaults: [
    "perfetto_defaults",
  ],
}

cc_library_static {
    name: "libstatslog_perfetto",
    generated_sources: ["statslog_perfetto.cpp"],
    generated_headers: ["statslog_perfetto.h"],
    cflags: [
        "-Wall",
        "-Werror",
    ],
    export_generated_headers: ["statslog_perfetto.h"],
    shared_libs: [
        "libcutils",
        "liblog",
        "libstatssocket",
        "libutils",
    ],
}

genrule {
    name: "statslog_perfetto.h",
    tools: ["stats-log-api-gen"],
    cmd: "$(location stats-log-api-gen) --header $(genDir)/statslog_perfetto.h --module perfetto --namespace perfetto,android_internal",
    out: [
        "statslog_perfetto.h",
    ],
}

genrule {
    name: "statslog_perfetto.cpp",
    tools: ["stats-log-api-gen"],
    cmd: "$(location stats-log-api-gen) --cpp $(genDir)/statslog_perfetto.cpp --module perfetto --namespace perfetto,android_internal --importHeader statslog_perfetto.h",
    out: [
        "statslog_perfetto.cpp",
    ],
}
