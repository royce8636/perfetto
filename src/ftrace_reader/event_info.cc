// Autogenerated by ../../tools/ftrace_proto_gen/ftrace_proto_gen.cc do not
// edit.

#include "src/ftrace_reader/event_info.h"

namespace perfetto {

std::vector<Event> GetStaticEventInfo() {
  std::vector<Event> events;

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "binder_lock";
    event->group = "binder";
    event->proto_field_id = 53;
    event->fields.push_back(FieldFromNameIdType("tag", 1, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "binder_locked";
    event->group = "binder";
    event->proto_field_id = 54;
    event->fields.push_back(FieldFromNameIdType("tag", 1, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "binder_set_priority";
    event->group = "binder";
    event->proto_field_id = 52;
    event->fields.push_back(FieldFromNameIdType("proc", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("thread", 2, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("old_prio", 3, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("new_prio", 4, kProtoUint32));
    event->fields.push_back(
        FieldFromNameIdType("desired_prio", 5, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "binder_transaction";
    event->group = "binder";
    event->proto_field_id = 50;
    event->fields.push_back(FieldFromNameIdType("debug_id", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("target_node", 2, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("to_proc", 3, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("to_thread", 4, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("reply", 5, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("code", 6, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("flags", 7, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "binder_transaction_received";
    event->group = "binder";
    event->proto_field_id = 51;
    event->fields.push_back(FieldFromNameIdType("debug_id", 1, kProtoInt32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "binder_unlock";
    event->group = "binder";
    event->proto_field_id = 55;
    event->fields.push_back(FieldFromNameIdType("tag", 1, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "block_rq_issue";
    event->group = "block";
    event->proto_field_id = 45;
    event->fields.push_back(FieldFromNameIdType("dev", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("sector", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("nr_sector", 3, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("bytes", 4, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("rwbs", 5, kProtoString));
    event->fields.push_back(FieldFromNameIdType("comm", 6, kProtoString));
    event->fields.push_back(FieldFromNameIdType("cmd", 7, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cgroup_attach_task";
    event->group = "cgroup";
    event->proto_field_id = 67;
    event->fields.push_back(FieldFromNameIdType("dst_root", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("dst_id", 2, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("pid", 3, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("comm", 4, kProtoString));
    event->fields.push_back(FieldFromNameIdType("cname", 5, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cgroup_destroy_root";
    event->group = "cgroup";
    event->proto_field_id = 72;
    event->fields.push_back(FieldFromNameIdType("root", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("ss_mask", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("name", 3, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cgroup_mkdir";
    event->group = "cgroup";
    event->proto_field_id = 68;
    event->fields.push_back(FieldFromNameIdType("root", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("id", 2, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("cname", 3, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cgroup_release";
    event->group = "cgroup";
    event->proto_field_id = 73;
    event->fields.push_back(FieldFromNameIdType("root", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("id", 2, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("cname", 3, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cgroup_remount";
    event->group = "cgroup";
    event->proto_field_id = 69;
    event->fields.push_back(FieldFromNameIdType("root", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("ss_mask", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("name", 3, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cgroup_rename";
    event->group = "cgroup";
    event->proto_field_id = 74;
    event->fields.push_back(FieldFromNameIdType("root", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("id", 2, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("cname", 3, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cgroup_rmdir";
    event->group = "cgroup";
    event->proto_field_id = 70;
    event->fields.push_back(FieldFromNameIdType("root", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("id", 2, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("cname", 3, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cgroup_setup_root";
    event->group = "cgroup";
    event->proto_field_id = 75;
    event->fields.push_back(FieldFromNameIdType("root", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("ss_mask", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("name", 3, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cgroup_transfer_tasks";
    event->group = "cgroup";
    event->proto_field_id = 71;
    event->fields.push_back(FieldFromNameIdType("dst_root", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("dst_id", 2, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("pid", 3, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("comm", 4, kProtoString));
    event->fields.push_back(FieldFromNameIdType("cname", 5, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cpufreq_interactive_already";
    event->group = "cpufreq_interactive";
    event->proto_field_id = 5;
    event->fields.push_back(FieldFromNameIdType("cpu_id", 1, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("load", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("curtarg", 3, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("curactual", 4, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("newtarg", 5, kProtoUint64));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cpufreq_interactive_boost";
    event->group = "cpufreq_interactive";
    event->proto_field_id = 6;
    event->fields.push_back(FieldFromNameIdType("s", 1, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cpufreq_interactive_notyet";
    event->group = "cpufreq_interactive";
    event->proto_field_id = 7;
    event->fields.push_back(FieldFromNameIdType("cpu_id", 1, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("load", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("curtarg", 3, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("curactual", 4, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("newtarg", 5, kProtoUint64));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cpufreq_interactive_setspeed";
    event->group = "cpufreq_interactive";
    event->proto_field_id = 8;
    event->fields.push_back(FieldFromNameIdType("cpu_id", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("targfreq", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("actualfreq", 3, kProtoUint64));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cpufreq_interactive_target";
    event->group = "cpufreq_interactive";
    event->proto_field_id = 9;
    event->fields.push_back(FieldFromNameIdType("cpu_id", 1, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("load", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("curtarg", 3, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("curactual", 4, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("newtarg", 5, kProtoUint64));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cpufreq_interactive_unboost";
    event->group = "cpufreq_interactive";
    event->proto_field_id = 10;
    event->fields.push_back(FieldFromNameIdType("s", 1, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "ext4_da_write_begin";
    event->group = "ext4";
    event->proto_field_id = 41;
    event->fields.push_back(FieldFromNameIdType("dev", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("ino", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("pos", 3, kProtoInt64));
    event->fields.push_back(FieldFromNameIdType("len", 4, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("flags", 5, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "ext4_da_write_end";
    event->group = "ext4";
    event->proto_field_id = 42;
    event->fields.push_back(FieldFromNameIdType("dev", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("ino", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("pos", 3, kProtoInt64));
    event->fields.push_back(FieldFromNameIdType("len", 4, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("copied", 5, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "ext4_sync_file_enter";
    event->group = "ext4";
    event->proto_field_id = 43;
    event->fields.push_back(FieldFromNameIdType("dev", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("ino", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("parent", 3, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("datasync", 4, kProtoInt32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "ext4_sync_file_exit";
    event->group = "ext4";
    event->proto_field_id = 44;
    event->fields.push_back(FieldFromNameIdType("dev", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("ino", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("ret", 3, kProtoInt32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mm_filemap_add_to_page_cache";
    event->group = "filemap";
    event->proto_field_id = 97;
    event->fields.push_back(FieldFromNameIdType("pfn", 1, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("i_ino", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("index", 3, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("s_dev", 4, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mm_filemap_delete_from_page_cache";
    event->group = "filemap";
    event->proto_field_id = 98;
    event->fields.push_back(FieldFromNameIdType("pfn", 1, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("i_ino", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("index", 3, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("s_dev", 4, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "print";
    event->group = "ftrace";
    event->proto_field_id = 3;
    event->fields.push_back(FieldFromNameIdType("ip", 1, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("buf", 2, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "i2c_read";
    event->group = "i2c";
    event->proto_field_id = 27;
    event->fields.push_back(FieldFromNameIdType("adapter_nr", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("msg_nr", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("addr", 3, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("flags", 4, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("len", 5, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "i2c_reply";
    event->group = "i2c";
    event->proto_field_id = 30;
    event->fields.push_back(FieldFromNameIdType("adapter_nr", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("msg_nr", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("addr", 3, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("flags", 4, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("len", 5, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("buf", 6, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "i2c_result";
    event->group = "i2c";
    event->proto_field_id = 29;
    event->fields.push_back(FieldFromNameIdType("adapter_nr", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("nr_msgs", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("ret", 3, kProtoInt32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "i2c_write";
    event->group = "i2c";
    event->proto_field_id = 28;
    event->fields.push_back(FieldFromNameIdType("adapter_nr", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("msg_nr", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("addr", 3, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("flags", 4, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("len", 5, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("buf", 6, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "smbus_read";
    event->group = "i2c";
    event->proto_field_id = 31;
    event->fields.push_back(FieldFromNameIdType("adapter_nr", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("flags", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("addr", 3, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("command", 4, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("protocol", 5, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "smbus_reply";
    event->group = "i2c";
    event->proto_field_id = 34;
    event->fields.push_back(FieldFromNameIdType("adapter_nr", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("addr", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("flags", 3, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("command", 4, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("len", 5, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("protocol", 6, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "smbus_result";
    event->group = "i2c";
    event->proto_field_id = 33;
    event->fields.push_back(FieldFromNameIdType("adapter_nr", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("addr", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("flags", 3, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("read_write", 4, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("command", 5, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("res", 6, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("protocol", 7, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "smbus_write";
    event->group = "i2c";
    event->proto_field_id = 32;
    event->fields.push_back(FieldFromNameIdType("adapter_nr", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("addr", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("flags", 3, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("command", 4, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("len", 5, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("protocol", 6, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "ipi_entry";
    event->group = "ipi";
    event->proto_field_id = 21;
    event->fields.push_back(FieldFromNameIdType("reason", 1, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "ipi_exit";
    event->group = "ipi";
    event->proto_field_id = 22;
    event->fields.push_back(FieldFromNameIdType("reason", 1, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "ipi_raise";
    event->group = "ipi";
    event->proto_field_id = 23;
    event->fields.push_back(
        FieldFromNameIdType("target_cpus", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("reason", 2, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "irq_handler_entry";
    event->group = "irq";
    event->proto_field_id = 36;
    event->fields.push_back(FieldFromNameIdType("irq", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("name", 2, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "irq_handler_exit";
    event->group = "irq";
    event->proto_field_id = 37;
    event->fields.push_back(FieldFromNameIdType("irq", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("ret", 2, kProtoInt32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "softirq_entry";
    event->group = "irq";
    event->proto_field_id = 24;
    event->fields.push_back(FieldFromNameIdType("vec", 1, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "softirq_exit";
    event->group = "irq";
    event->proto_field_id = 25;
    event->fields.push_back(FieldFromNameIdType("vec", 1, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "softirq_raise";
    event->group = "irq";
    event->proto_field_id = 26;
    event->fields.push_back(FieldFromNameIdType("vec", 1, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "lowmemory_kill";
    event->group = "lowmemorykiller";
    event->proto_field_id = 35;
    event->fields.push_back(FieldFromNameIdType("comm", 1, kProtoString));
    event->fields.push_back(FieldFromNameIdType("pid", 2, kProtoInt32));
    event->fields.push_back(
        FieldFromNameIdType("pagecache_size", 3, kProtoInt64));
    event->fields.push_back(
        FieldFromNameIdType("pagecache_limit", 4, kProtoInt64));
    event->fields.push_back(FieldFromNameIdType("free", 5, kProtoInt64));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mdp_cmd_kickoff";
    event->group = "mdss";
    event->proto_field_id = 76;
    event->fields.push_back(FieldFromNameIdType("ctl_num", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("kickoff_cnt", 2, kProtoInt32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mdp_cmd_pingpong_done";
    event->group = "mdss";
    event->proto_field_id = 81;
    event->fields.push_back(FieldFromNameIdType("ctl_num", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("intf_num", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("pp_num", 3, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("koff_cnt", 4, kProtoInt32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mdp_cmd_readptr_done";
    event->group = "mdss";
    event->proto_field_id = 85;
    event->fields.push_back(FieldFromNameIdType("ctl_num", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("koff_cnt", 2, kProtoInt32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mdp_cmd_release_bw";
    event->group = "mdss";
    event->proto_field_id = 89;
    event->fields.push_back(FieldFromNameIdType("ctl_num", 1, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mdp_cmd_wait_pingpong";
    event->group = "mdss";
    event->proto_field_id = 93;
    event->fields.push_back(FieldFromNameIdType("ctl_num", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("kickoff_cnt", 2, kProtoInt32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mdp_commit";
    event->group = "mdss";
    event->proto_field_id = 77;
    event->fields.push_back(FieldFromNameIdType("num", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("play_cnt", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("clk_rate", 3, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("bandwidth", 4, kProtoUint64));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mdp_compare_bw";
    event->group = "mdss";
    event->proto_field_id = 82;
    event->fields.push_back(FieldFromNameIdType("new_ab", 1, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("new_ib", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("new_wb", 3, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("old_ab", 4, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("old_ib", 5, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("old_wb", 6, kProtoUint64));
    event->fields.push_back(
        FieldFromNameIdType("params_changed", 7, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("update_bw", 8, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mdp_misr_crc";
    event->group = "mdss";
    event->proto_field_id = 86;
    event->fields.push_back(FieldFromNameIdType("block_id", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("vsync_cnt", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("crc", 3, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mdp_mixer_update";
    event->group = "mdss";
    event->proto_field_id = 90;
    event->fields.push_back(FieldFromNameIdType("mixer_num", 1, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mdp_perf_prefill_calc";
    event->group = "mdss";
    event->proto_field_id = 94;
    event->fields.push_back(FieldFromNameIdType("pnum", 1, kProtoUint32));
    event->fields.push_back(
        FieldFromNameIdType("latency_buf", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("ot", 3, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("y_buf", 4, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("y_scaler", 5, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("pp_lines", 6, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("pp_bytes", 7, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("post_sc", 8, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("fbc_bytes", 9, kProtoUint32));
    event->fields.push_back(
        FieldFromNameIdType("prefill_bytes", 10, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mdp_perf_set_ot";
    event->group = "mdss";
    event->proto_field_id = 78;
    event->fields.push_back(FieldFromNameIdType("pnum", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("xin_id", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("rd_lim", 3, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("is_vbif_rt", 4, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mdp_perf_set_panic_luts";
    event->group = "mdss";
    event->proto_field_id = 83;
    event->fields.push_back(FieldFromNameIdType("pnum", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("fmt", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("mode", 3, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("panic_lut", 4, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("robust_lut", 5, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mdp_perf_set_qos_luts";
    event->group = "mdss";
    event->proto_field_id = 87;
    event->fields.push_back(FieldFromNameIdType("pnum", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("fmt", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("intf", 3, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("rot", 4, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("fl", 5, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("lut", 6, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("linear", 7, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mdp_perf_set_wm_levels";
    event->group = "mdss";
    event->proto_field_id = 91;
    event->fields.push_back(FieldFromNameIdType("pnum", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("use_space", 2, kProtoUint32));
    event->fields.push_back(
        FieldFromNameIdType("priority_bytes", 3, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("wm0", 4, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("wm1", 5, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("wm2", 6, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("mb_cnt", 7, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("mb_size", 8, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mdp_perf_update_bus";
    event->group = "mdss";
    event->proto_field_id = 95;
    event->fields.push_back(FieldFromNameIdType("client", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("ab_quota", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("ib_quota", 3, kProtoUint64));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mdp_sspp_change";
    event->group = "mdss";
    event->proto_field_id = 79;
    event->fields.push_back(FieldFromNameIdType("num", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("play_cnt", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("mixer", 3, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("stage", 4, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("flags", 5, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("format", 6, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("img_w", 7, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("img_h", 8, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("src_x", 9, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("src_y", 10, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("src_w", 11, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("src_h", 12, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("dst_x", 13, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("dst_y", 14, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("dst_w", 15, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("dst_h", 16, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mdp_sspp_set";
    event->group = "mdss";
    event->proto_field_id = 84;
    event->fields.push_back(FieldFromNameIdType("num", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("play_cnt", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("mixer", 3, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("stage", 4, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("flags", 5, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("format", 6, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("img_w", 7, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("img_h", 8, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("src_x", 9, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("src_y", 10, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("src_w", 11, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("src_h", 12, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("dst_x", 13, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("dst_y", 14, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("dst_w", 15, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("dst_h", 16, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mdp_trace_counter";
    event->group = "mdss";
    event->proto_field_id = 88;
    event->fields.push_back(FieldFromNameIdType("pid", 1, kProtoInt32));
    event->fields.push_back(
        FieldFromNameIdType("counter_name", 2, kProtoString));
    event->fields.push_back(FieldFromNameIdType("value", 3, kProtoInt32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mdp_video_underrun_done";
    event->group = "mdss";
    event->proto_field_id = 92;
    event->fields.push_back(FieldFromNameIdType("ctl_num", 1, kProtoUint32));
    event->fields.push_back(
        FieldFromNameIdType("underrun_cnt", 2, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "rotator_bw_ao_as_context";
    event->group = "mdss";
    event->proto_field_id = 96;
    event->fields.push_back(FieldFromNameIdType("state", 1, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "tracing_mark_write";
    event->group = "mdss";
    event->proto_field_id = 80;
    event->fields.push_back(FieldFromNameIdType("pid", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("trace_name", 2, kProtoString));
    event->fields.push_back(
        FieldFromNameIdType("trace_begin", 3, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "clock_disable";
    event->group = "power";
    event->proto_field_id = 15;
    event->fields.push_back(FieldFromNameIdType("name", 1, kProtoString));
    event->fields.push_back(FieldFromNameIdType("state", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("cpu_id", 3, kProtoUint64));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "clock_enable";
    event->group = "power";
    event->proto_field_id = 14;
    event->fields.push_back(FieldFromNameIdType("name", 1, kProtoString));
    event->fields.push_back(FieldFromNameIdType("state", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("cpu_id", 3, kProtoUint64));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "clock_set_rate";
    event->group = "power";
    event->proto_field_id = 16;
    event->fields.push_back(FieldFromNameIdType("name", 1, kProtoString));
    event->fields.push_back(FieldFromNameIdType("state", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("cpu_id", 3, kProtoUint64));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cpu_frequency";
    event->group = "power";
    event->proto_field_id = 11;
    event->fields.push_back(FieldFromNameIdType("state", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("cpu_id", 2, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cpu_frequency_limits";
    event->group = "power";
    event->proto_field_id = 12;
    event->fields.push_back(FieldFromNameIdType("min_freq", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("max_freq", 2, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("cpu_id", 3, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "cpu_idle";
    event->group = "power";
    event->proto_field_id = 13;
    event->fields.push_back(FieldFromNameIdType("state", 1, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("cpu_id", 2, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "regulator_disable";
    event->group = "regulator";
    event->proto_field_id = 60;
    event->fields.push_back(FieldFromNameIdType("name", 1, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "regulator_disable_complete";
    event->group = "regulator";
    event->proto_field_id = 61;
    event->fields.push_back(FieldFromNameIdType("name", 1, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "regulator_enable";
    event->group = "regulator";
    event->proto_field_id = 62;
    event->fields.push_back(FieldFromNameIdType("name", 1, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "regulator_enable_complete";
    event->group = "regulator";
    event->proto_field_id = 63;
    event->fields.push_back(FieldFromNameIdType("name", 1, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "regulator_enable_delay";
    event->group = "regulator";
    event->proto_field_id = 64;
    event->fields.push_back(FieldFromNameIdType("name", 1, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "regulator_set_voltage";
    event->group = "regulator";
    event->proto_field_id = 65;
    event->fields.push_back(FieldFromNameIdType("name", 1, kProtoString));
    event->fields.push_back(FieldFromNameIdType("min", 2, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("max", 3, kProtoInt32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "regulator_set_voltage_complete";
    event->group = "regulator";
    event->proto_field_id = 66;
    event->fields.push_back(FieldFromNameIdType("name", 1, kProtoString));
    event->fields.push_back(FieldFromNameIdType("val", 2, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "sched_blocked_reason";
    event->group = "sched";
    event->proto_field_id = 18;
    event->fields.push_back(FieldFromNameIdType("pid", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("caller", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("io_wait", 3, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "sched_cpu_hotplug";
    event->group = "sched";
    event->proto_field_id = 19;
    event->fields.push_back(
        FieldFromNameIdType("affected_cpu", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("error", 2, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("status", 3, kProtoInt32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "sched_switch";
    event->group = "sched";
    event->proto_field_id = 4;
    event->fields.push_back(FieldFromNameIdType("prev_comm", 1, kProtoString));
    event->fields.push_back(FieldFromNameIdType("prev_pid", 2, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("prev_prio", 3, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("prev_state", 4, kProtoInt64));
    event->fields.push_back(FieldFromNameIdType("next_comm", 5, kProtoString));
    event->fields.push_back(FieldFromNameIdType("next_pid", 6, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("next_prio", 7, kProtoInt32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "sched_wakeup";
    event->group = "sched";
    event->proto_field_id = 17;
    event->fields.push_back(FieldFromNameIdType("comm", 1, kProtoString));
    event->fields.push_back(FieldFromNameIdType("pid", 2, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("prio", 3, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("success", 4, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("target_cpu", 5, kProtoInt32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "sched_waking";
    event->group = "sched";
    event->proto_field_id = 20;
    event->fields.push_back(FieldFromNameIdType("comm", 1, kProtoString));
    event->fields.push_back(FieldFromNameIdType("pid", 2, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("prio", 3, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("success", 4, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("target_cpu", 5, kProtoInt32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "sync_pt";
    event->group = "sync";
    event->proto_field_id = 38;
    event->fields.push_back(FieldFromNameIdType("timeline", 1, kProtoString));
    event->fields.push_back(FieldFromNameIdType("value", 2, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "sync_timeline";
    event->group = "sync";
    event->proto_field_id = 39;
    event->fields.push_back(FieldFromNameIdType("name", 1, kProtoString));
    event->fields.push_back(FieldFromNameIdType("value", 2, kProtoString));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "sync_wait";
    event->group = "sync";
    event->proto_field_id = 40;
    event->fields.push_back(FieldFromNameIdType("name", 1, kProtoString));
    event->fields.push_back(FieldFromNameIdType("status", 2, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("begin", 3, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mm_vmscan_direct_reclaim_begin";
    event->group = "vmscan";
    event->proto_field_id = 46;
    event->fields.push_back(FieldFromNameIdType("order", 1, kProtoInt32));
    event->fields.push_back(
        FieldFromNameIdType("may_writepage", 2, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("gfp_flags", 3, kProtoUint32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mm_vmscan_direct_reclaim_end";
    event->group = "vmscan";
    event->proto_field_id = 47;
    event->fields.push_back(
        FieldFromNameIdType("nr_reclaimed", 1, kProtoUint64));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mm_vmscan_kswapd_sleep";
    event->group = "vmscan";
    event->proto_field_id = 49;
    event->fields.push_back(FieldFromNameIdType("nid", 1, kProtoInt32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "mm_vmscan_kswapd_wake";
    event->group = "vmscan";
    event->proto_field_id = 48;
    event->fields.push_back(FieldFromNameIdType("nid", 1, kProtoInt32));
    event->fields.push_back(FieldFromNameIdType("order", 2, kProtoInt32));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "workqueue_activate_work";
    event->group = "workqueue";
    event->proto_field_id = 56;
    event->fields.push_back(FieldFromNameIdType("work", 1, kProtoUint64));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "workqueue_execute_end";
    event->group = "workqueue";
    event->proto_field_id = 57;
    event->fields.push_back(FieldFromNameIdType("work", 1, kProtoUint64));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "workqueue_execute_start";
    event->group = "workqueue";
    event->proto_field_id = 58;
    event->fields.push_back(FieldFromNameIdType("work", 1, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("function", 2, kProtoUint64));
  }

  {
    events.emplace_back(Event{});
    Event* event = &events.back();
    event->name = "workqueue_queue_work";
    event->group = "workqueue";
    event->proto_field_id = 59;
    event->fields.push_back(FieldFromNameIdType("work", 1, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("function", 2, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("workqueue", 3, kProtoUint64));
    event->fields.push_back(FieldFromNameIdType("req_cpu", 4, kProtoUint32));
    event->fields.push_back(FieldFromNameIdType("cpu", 5, kProtoUint32));
  }

  return events;
}

}  // namespace perfetto
