# Copyright (C) 2020 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../../../gn/perfetto_cc_proto_descriptor.gni")

source_set("importers_full") {
  sources = [
    "additional_modules.cc",
    "additional_modules.h",
    "ftrace/binder_tracker.cc",
    "ftrace/binder_tracker.h",
    "ftrace/drm_tracker.cc",
    "ftrace/drm_tracker.h",
    "ftrace/ftrace_module_impl.cc",
    "ftrace/ftrace_module_impl.h",
    "ftrace/ftrace_parser.cc",
    "ftrace/ftrace_parser.h",
    "ftrace/ftrace_tokenizer.cc",
    "ftrace/ftrace_tokenizer.h",
    "ftrace/iostat_tracker.cc",
    "ftrace/iostat_tracker.h",
    "ftrace/rss_stat_tracker.cc",
    "ftrace/rss_stat_tracker.h",
    "ftrace/sched_event_tracker.cc",
    "ftrace/sched_event_tracker.h",
    "ftrace/thread_state_tracker.cc",
    "ftrace/thread_state_tracker.h",
    "ftrace/v4l2_tracker.cc",
    "ftrace/v4l2_tracker.h",
    "ftrace/virtio_video_tracker.cc",
    "ftrace/virtio_video_tracker.h",
    "fuchsia/fuchsia_trace_parser.cc",
    "fuchsia/fuchsia_trace_parser.h",
    "fuchsia/fuchsia_trace_tokenizer.cc",
    "fuchsia/fuchsia_trace_tokenizer.h",
    "fuchsia/fuchsia_trace_utils.cc",
    "gzip/gzip_trace_parser.cc",
    "gzip/gzip_trace_parser.h",
    "i2c/i2c_tracker.cc",
    "i2c/i2c_tracker.h",
    "json/json_trace_parser.cc",
    "json/json_trace_parser.h",
    "json/json_trace_tokenizer.cc",
    "json/json_trace_tokenizer.h",
    "proto/android_probes_module.cc",
    "proto/android_probes_module.h",
    "proto/android_probes_parser.cc",
    "proto/android_probes_parser.h",
    "proto/android_probes_tracker.cc",
    "proto/android_probes_tracker.h",
    "proto/content_analyzer.cc",
    "proto/content_analyzer.h",
    "proto/frame_timeline_event_parser.cc",
    "proto/frame_timeline_event_parser.h",
    "proto/gpu_event_parser.cc",
    "proto/gpu_event_parser.h",
    "proto/graphics_event_module.cc",
    "proto/graphics_event_module.h",
    "proto/graphics_frame_event_parser.cc",
    "proto/graphics_frame_event_parser.h",
    "proto/heap_graph_module.cc",
    "proto/heap_graph_module.h",
    "proto/system_probes_module.cc",
    "proto/system_probes_module.h",
    "proto/system_probes_parser.cc",
    "proto/system_probes_parser.h",
    "proto/vulkan_memory_tracker.cc",
    "proto/vulkan_memory_tracker.h",
    "syscalls/syscall_tracker.cc",
    "systrace/systrace_line_parser.cc",
    "systrace/systrace_line_parser.h",
    "systrace/systrace_line_tokenizer.cc",
    "systrace/systrace_line_tokenizer.h",
    "systrace/systrace_parser.cc",
    "systrace/systrace_parser.h",
    "systrace/systrace_trace_parser.cc",
    "systrace/systrace_trace_parser.h",
  ]
  public_deps = [ "../:storage_minimal" ]
  deps = [
    ":gen_cc_trace_descriptor",
    "../:ftrace_descriptors",
    "../../../include/perfetto/ext/base:base",
    "../../../include/perfetto/ext/traced:sys_stats_counters",
    "../../../protos/perfetto/common:zero",
    "../../../protos/perfetto/trace:zero",
    "../../../protos/perfetto/trace/android:zero",
    "../../../protos/perfetto/trace/gpu:zero",
    "../../../protos/perfetto/trace/interned_data:zero",
    "../../protozero",
    "../storage",
    "../tables",
    "../types",
    "../util",
    "../util:gzip",
    "../util:proto_profiler",
    "../views",
    "android_bugreport",
    "common",
    "fuchsia:fuchsia_record",
    "proto:storage_full",
    "proto:storage_minimal",
    "systrace:systrace_line",
  ]
  if (enable_perfetto_trace_processor_json) {
    deps += [ "../../../gn:jsoncpp" ]
  }
}

perfetto_cc_proto_descriptor("gen_cc_statsd_atoms_descriptor") {
  descriptor_name = "atoms.descriptor"
  descriptor_path = "./proto/atoms.descriptor"
}

perfetto_cc_proto_descriptor("gen_cc_config_descriptor") {
  descriptor_name = "config.descriptor"
  descriptor_target = "../../../protos/perfetto/config:descriptor"
}

perfetto_cc_proto_descriptor("gen_cc_chrome_track_event_descriptor") {
  descriptor_name = "chrome_track_event.descriptor"
  descriptor_target = "../../../protos/third_party/chromium:descriptor"
}

perfetto_cc_proto_descriptor("gen_cc_track_event_descriptor") {
  descriptor_name = "track_event.descriptor"
  descriptor_target = "../../../protos/perfetto/trace/track_event:descriptor"
}

perfetto_cc_proto_descriptor("gen_cc_trace_descriptor") {
  descriptor_name = "trace.descriptor"
  descriptor_target = "../../../protos/perfetto/trace:descriptor"
}
